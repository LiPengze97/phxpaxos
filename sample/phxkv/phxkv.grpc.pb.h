// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: phxkv.proto
#ifndef GRPC_phxkv_2eproto__INCLUDED
#define GRPC_phxkv_2eproto__INCLUDED

#include "phxkv.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace phxkv {

class PhxKVServer final {
 public:
  static constexpr char const* service_full_name() {
    return "phxkv.PhxKVServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>> AsyncPut(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>> PrepareAsyncPut(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>>(PrepareAsyncPutRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>> AsyncGetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>>(AsyncGetLocalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>> PrepareAsyncGetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>>(PrepareAsyncGetLocalRaw(context, request, cq));
    }
    virtual ::grpc::Status GetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>> AsyncGetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>>(AsyncGetGlobalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>> PrepareAsyncGetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>>(PrepareAsyncGetGlobalRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>> AsyncDelete(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Put(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLocal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGlobal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>* AsyncPutRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>* AsyncGetLocalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>* PrepareAsyncGetLocalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>* AsyncGetGlobalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>* PrepareAsyncGetGlobalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxkv::KVResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Put(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>> AsyncPut(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>> PrepareAsyncPut(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>>(PrepareAsyncPutRaw(context, request, cq));
    }
    ::grpc::Status GetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>> AsyncGetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>>(AsyncGetLocalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>> PrepareAsyncGetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>>(PrepareAsyncGetLocalRaw(context, request, cq));
    }
    ::grpc::Status GetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>> AsyncGetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>>(AsyncGetGlobalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>> PrepareAsyncGetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>>(PrepareAsyncGetGlobalRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>> AsyncDelete(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Put(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) override;
      void Put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLocal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) override;
      void GetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) override;
      void GetGlobal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* AsyncPutRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* AsyncGetLocalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PrepareAsyncGetLocalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* AsyncGetGlobalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PrepareAsyncGetGlobalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLocal_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGlobal_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response);
    virtual ::grpc::Status GetLocal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response);
    virtual ::grpc::Status GetGlobal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::phxkv::KVOperator* request, ::grpc::ServerAsyncResponseWriter< ::phxkv::KVResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLocal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetLocal() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetLocal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocal(::grpc::ServerContext* context, ::phxkv::KVOperator* request, ::grpc::ServerAsyncResponseWriter< ::phxkv::KVResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetGlobal() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGlobal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGlobal(::grpc::ServerContext* context, ::phxkv::KVOperator* request, ::grpc::ServerAsyncResponseWriter< ::phxkv::KVResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::phxkv::KVOperator* request, ::grpc::ServerAsyncResponseWriter< ::phxkv::KVResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Put<WithAsyncMethod_GetLocal<WithAsyncMethod_GetGlobal<WithAsyncMethod_Delete<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Put() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::phxkv::KVOperator, ::phxkv::KVResponse>(
          [this](::grpc::ServerContext* context,
                 const ::phxkv::KVOperator* request,
                 ::phxkv::KVResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Put(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Put(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLocal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetLocal() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::phxkv::KVOperator, ::phxkv::KVResponse>(
          [this](::grpc::ServerContext* context,
                 const ::phxkv::KVOperator* request,
                 ::phxkv::KVResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetLocal(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetLocal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLocal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetGlobal() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::phxkv::KVOperator, ::phxkv::KVResponse>(
          [this](::grpc::ServerContext* context,
                 const ::phxkv::KVOperator* request,
                 ::phxkv::KVResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetGlobal(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGlobal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetGlobal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::phxkv::KVOperator, ::phxkv::KVResponse>(
          [this](::grpc::ServerContext* context,
                 const ::phxkv::KVOperator* request,
                 ::phxkv::KVResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Put<ExperimentalWithCallbackMethod_GetLocal<ExperimentalWithCallbackMethod_GetGlobal<ExperimentalWithCallbackMethod_Delete<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLocal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetLocal() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetLocal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetGlobal() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGlobal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLocal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetLocal() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetLocal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetGlobal() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGlobal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGlobal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Put() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Put(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Put(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLocal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLocal() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetLocal(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLocal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLocal(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetGlobal() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetGlobal(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGlobal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetGlobal(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::phxkv::KVOperator, ::phxkv::KVResponse>(std::bind(&WithStreamedUnaryMethod_Put<BaseClass>::StreamedPut, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::phxkv::KVOperator,::phxkv::KVResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLocal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetLocal() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::phxkv::KVOperator, ::phxkv::KVResponse>(std::bind(&WithStreamedUnaryMethod_GetLocal<BaseClass>::StreamedGetLocal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetLocal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLocal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLocal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::phxkv::KVOperator,::phxkv::KVResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetGlobal() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::phxkv::KVOperator, ::phxkv::KVResponse>(std::bind(&WithStreamedUnaryMethod_GetGlobal<BaseClass>::StreamedGetGlobal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGlobal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGlobal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::phxkv::KVOperator,::phxkv::KVResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::phxkv::KVOperator, ::phxkv::KVResponse>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::phxkv::KVOperator,::phxkv::KVResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_GetLocal<WithStreamedUnaryMethod_GetGlobal<WithStreamedUnaryMethod_Delete<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_GetLocal<WithStreamedUnaryMethod_GetGlobal<WithStreamedUnaryMethod_Delete<Service > > > > StreamedService;
};

}  // namespace phxkv


#endif  // GRPC_phxkv_2eproto__INCLUDED
